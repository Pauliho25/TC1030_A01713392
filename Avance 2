#include <iostream>
#include <vector>
using namespace std;

// Clase base
class Product {
protected:
    int id;
    string name;
    int quantity;
    double price;

public:
    Product(int id, string name, int quantity, double price) {
        this->id = id;
        this->name = name;
        this->quantity = quantity;
        this->price = price;
    }

    virtual double getTotalValue() {
        return quantity * price;
    }

    void showInfo() {
        cout << "ID: " << id << ", Nombre: " << name 
             << ", Cantidad: " << quantity << ", Precio: $" << price << endl;
    }

    int getId() { return id; }
    int getQuantity() { return quantity; }
    void setQuantity(int q) { quantity = q; }
};

class DiscountedProduct : public Product {
private:
    double discount;

public:
    DiscountedProduct(int id, string name, int quantity, double price, double discount)
        : Product(id, name, quantity, price) {
        this->discount = discount;
    }

    double getTotalValue() override {
        return quantity * price * (1.0 - discount);
    }
};

// Inventario simple
class Inventory {
private:
    vector<Product*> products;

public:
    void addProduct(Product* p) {
        products.push_back(p);
    }

    void showInventory() {
        for (Product* p : products) {
            p->showInfo();
            cout << "Valor total: $" << p->getTotalValue() << endl;
        }
    }
};


int main() {
    Inventory inventory;

    Product* p1 = new Product(1, "Cuaderno", 10, 15.0);
    Product* p2 = new DiscountedProduct(2, "Lapicero", 20, 5.0, 0.2); // 20% de descuento

    inventory.addProduct(p1);
    inventory.addProduct(p2);

    inventory.showInventory();


    return 0;
}
